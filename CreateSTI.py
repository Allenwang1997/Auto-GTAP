__author__ = "Andre Barbe"
__project__ = "Auto-GTAP"
__created__ = "2018-3-13"
__altered__ = "2018-3-23"


class CreateSTI(object):
    """Creates an STI File for controlling SLTOHT
    SLTOHT exports variables from the .sl4 file to a .csv file
    The STI file tells SLTOHT where its input and output files are"""

    # Also creates STI files for PGSing .tab files

    __slots__ = ["input_file_name", "simulation_name", "sti_type"]

    def __init__(self, input_file_name: str, simulation_name: str, sti_type: str) -> None:
        self.input_file_name = input_file_name
        self.simulation_name = simulation_name
        self.sti_type = sti_type

        # Create list of lines to write to STI file
        if self.sti_type == "sltoht":
            line_list = [
                # First, select general options
                "bat         		! Run in batch. \n",
                "log		        ! Start a log file \n",
                "b		        	! Output to both terminal and log file \n",
                "sim_{0}_sltoth_sti.log	    	! Name of log file\n".format(self.simulation_name),
                "ses                ! Output to spreadsheet with element labels \n",
                ",                  ! Character to use for data separation \n",
                "shl                ! Show level results, if available \n",
                "                   ! Done selecting general options \n",
                "sim_{0}.sl4            ! Location of sl4 file to convert to csv \n".format(self.simulation_name),
                "c                  ! Want both levels and cumulative from solution file \n",
                "y                  ! Use file to choose which variables and components to ouptut \n",
                "sim_{0}.map            ! Name of file to use choosing which variables and components to output \n".format(
                    self.simulation_name),
                "sim_{0}.csv            ! Name of file to output to".format(self.simulation_name)
            ]
            output_file_name = "sim_{0}_sltoht".format(self.simulation_name)

        if self.sti_type == "gtap":
            line_list = [
                "!   gtap.sti \n",
                "! == == == == \n",
                "! \n",
                "!   TABLO sti file for GTAP 6.1 \n",
                "! \n",
                "bat         ! Run in batch. \n",
                " \n",
                "gtap        ! name of TABLO input file \n",
                "gtap        ! name of information file \n",
                "c           ! Perform condensation. \n",
                "o           ! Omit one or more variables. \n",
                "atall \n",
                "tf \n",
                " \n",
                "b           ! Substitute a variable and backsolve for it. \n",
                "pgd \n",
                "GHHDPRICE \n",
                "b \n",
                "pgm \n",
                "GHHIPRICES \n",
                "b \n",
                "pgt \n",
                "GCOMPRICE \n",
                "b \n",
                "qgm \n",
                "GHHLDAGRIMP \n",
                "b \n",
                "qgt \n",
                "QGTEQ \n",
                "b \n",
                "pgov \n",
                "GPRICEINDEX \n",
                "b \n",
                "qpt \n",
                "QPTEQ \n",
                "b \n",
                "ppd \n",
                "PHHDPRICE \n",
                "b \n",
                "ppm \n",
                "PHHIPRICES \n",
                "b \n",
                "qpm \n",
                "PHHLDAGRIMP \n",
                "b \n",
                "ppt \n",
                "PCOMPRICE \n",
                "b \n",
                "qft \n",
                "QFTEQ \n",
                "b \n",
                "pfd \n",
                "DMNDDPRICE \n",
                "b \n",
                "pfm \n",
                "DMNDIPRICES \n",
                "b \n",
                "pft \n",
                "ICOMPRICE \n",
                "b \n",
                "qfm \n",
                "INDIMP \n",
                "b \n",
                "ao \n",
                "AOWORLD \n",
                "b \n",
                "af \n",
                "AFWORLD \n",
                "b \n",
                "qfe \n",
                "QFEEQ \n",
                "b \n",
                "pfob \n",
                "EXPRICES \n",
                "b \n",
                "pms \n",
                "MKTPRICES \n",
                "b \n",
                "qtmfsd \n",
                "QTRANS_MFSD \n",
                "b \n",
                "ptrans \n",
                "TRANSCOSTINDEX \n",
                "b \n",
                "atmfsd \n",
                "TRANSTECHANGE \n",
                "b \n",
                "pcif \n",
                "FOBCIF \n",
                "b \n",
                "compvalad \n",
                "COMPVALADEQ \n",
                "b \n",
                "CNTqor \n",
                "CONT_EV_qor \n",
                "b \n",
                "CNTqoir \n",
                "CONT_EV_qoir \n",
                "b \n",
                "CNTqfer \n",
                "CONT_EV_qfer \n",
                "b \n",
                "CNTqfeir \n",
                "CONT_EV_qfeir \n",
                "b \n",
                "CNTqfeijr \n",
                "CONT_EV_qfeijr \n",
                "b \n",
                "CNTqfmr \n",
                "CONT_EV_qfmr \n",
                "b \n",
                "CNTqfmir \n",
                "CONT_EV_qfmir \n",
                "b \n",
                "CNTqfmijr \n",
                "CONT_EV_qfmijr \n",
                "b \n",
                "CNTqfdr \n",
                "CONT_EV_qfdr \n",
                "b \n",
                "CNTqfdir \n",
                "CONT_EV_qfdir \n",
                "b \n",
                "CNTqfdijr \n",
                "CONT_EV_qfdijr \n",
                "b \n",
                "CNTqpmr \n",
                "CONT_EV_qpmr \n",
                "b \n",
                "CNTqpmir \n",
                "CONT_EV_qpmir \n",
                "b \n",
                "CNTqpdr \n",
                "CONT_EV_qpdr \n",
                "b \n",
                "CNTqpdir \n",
                "CONT_EV_qpdir \n",
                "b \n",
                "CNTqgmr \n",
                "CONT_EV_qgmr \n",
                "b \n",
                "CNTqgmir \n",
                "CONT_EV_qgmir \n",
                "b \n",
                "CNTqgdr \n",
                "CONT_EV_qgdr \n",
                "b \n",
                "CNTqgdir \n",
                "CONT_EV_qgdir \n",
                "b \n",
                "CNTqxsr \n",
                "CONT_EV_qxsr \n",
                "b \n",
                "CNTqxsirs \n",
                "CONT_EV_qxsirs \n",
                "b \n",
                "CNTqimr \n",
                "CONT_EV_qimr \n",
                "b \n",
                "CNTqimisr \n",
                "CONT_EV_qimisr \n",
                "b \n",
                "CNTalleffr \n",
                "CONT_EV_alleffr \n",
                "b \n",
                "CNTtotr \n",
                "CONT_EV_totr \n",
                "b \n",
                "CNTtech_aoir \n",
                "CONT_EV_tech_aoir \n",
                "b \n",
                "CNTtech_afijr \n",
                "CONT_EV_tech_afijr \n",
                "b \n",
                "CNTtech_afmfdsd \n",
                "CONT_EV_tech_afmfdsd \n",
                "b \n",
                "CNTtech_amsirs \n",
                "CONT_EV_tech_amsirs \n",
                "e           ! Exit condensation. \n",
                "a           ! Proceed to automatic code generation. \n",
                "pgs         ! Write a GEMSIM program. \n",
                " \n",
                "gtap        ! name of program file \n",
                "! \n",
                "! \n",
                "!   end of stored input \n",
                "!   ------------------- \n"
            ]
            output_file_name = self.input_file_name

        # Create final file
        with open("{0}.sti".format(output_file_name), "w+") as writer:  # Create the empty file
            writer.writelines(line_list)  # write the line list to the file
